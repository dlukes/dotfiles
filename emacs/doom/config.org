#+title: Doom Emacs literate configuration
#+author: David Lukeš

#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* General tips
** Inspiration from upstream
To see tips & recommendations based on the current upstream reference config, open [[file:~/.config/emacs/templates/config.example.el][the example config.el]] (especially for a refresher on the useful functions/macros to rely on in your config!) or [[file:~/.config/emacs/templates/init.example.el][init.el]] that ship with Doom.

See [[https://discourse.doomemacs.org/t/common-config-anti-patterns/][common config anti-patterns]] for how /not/ to do things.

** Literate config inspiration
- TEC ([[https://github.com/tecosaur/emacs-config/blob/master/config.org][GitHub]], [[https://tecosaur.github.io/emacs-config/config.html][tangled]])

** Debugging
Trigger debugger backtraces to investigate problems or just dig deeper into call stacks you don't quite understand. Either with =M-x doom-debug-mode=, or by using [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Error-Debugging.html][Emacs's debugging facilities]] directly:

#+begin_src elisp :tangle no
(setq
  debug-on-error t
  debug-on-message "message regexp")
#+end_src

See also Doom docs on [[https://discourse.doomemacs.org/t/what-is-a-backtrace-how-to-produce-them/85][producing and interpreting backtraces]], and a more general guide on [[https://discourse.doomemacs.org/t/how-to-debug-issues/55][debugging issues in Doom/Emacs]].

* Personal information
#+begin_src elisp
(setq
  user-full-name "David Lukeš"
  user-mail-address "dafydd.lukes@gmail.com")
#+end_src

* Better defaults
** Exit behavior
#+begin_src elisp
(setq!
  confirm-kill-emacs nil
  confirm-kill-processes nil)
#+end_src

** Editing
Indenting the second line of a s-exp looks nice in most cases, but not always (e.g. in the case of ~let~, where you'd rather have the pairs align). Unfortunately, there's no easy way to distinguish between the two. Setting ~lisp-indent-offset~ to ~nil~ plays nicely with ~let~, but makes other cases look ugly, and since it affects automatic indentation, it's a no go. Probably just get used to ugly ~let~​s.  Furthermore, when using EditorConfig, you'd actually need to tweak ~editorconfig-lisp-use-default-indent~, otherwise it overrides this setting.

OTOH, if you want ~lisp-indent-offset~ in Org Mode code blocks, you'll have to set it manually, because then EditorConfig does /not/ come into play, as it's not in the context of a Lisp source file. Sigh.

#+begin_src elisp
(setq!
  lisp-indent-offset 2
  ;; editorconfig-lisp-use-default-indent nil
  completion-ignore-case t
  delete-by-moving-to-trash t
  undo-limit 80000000
  evil-want-fine-undo t)
#+end_src

Raise ~undo-limit~ to 80 MB: undo files are truncated when too large, the truncation process is linear, which doesn't play nicely with undo trees, which aren't.

If you ever need word motions to navigate within CamelCase subwords, enable ~global-subword-mode~. There's probably something similar for snake_case?

** Basic e-mail config
Compose e-mail to send either with =M-x mail= or =M-x message-mail= (the latter if you want to include MIME attachments).

#+begin_src elisp
(setq!
  smtpmail-smtp-server "smtp.gmail.com"
  smtpmail-smtp-service 587
  smtpmail-stream-type 'starttls
  send-mail-function #'smtpmail-send-it
  auth-sources '("~/Desktop/data/authinfo"))
#+end_src

** UI
#+begin_src elisp
(setq!
  scroll-bar-mode 'right
  display-line-numbers-type nil
  column-number-indicator-zero-based nil
  scroll-margin 2
  truncate-string-ellipsis "…"
  password-cache-expiry nil

  calendar-week-start-day 1
  display-time-day-and-date t

  window-combination-resize t
  ns-use-native-fullscreen t)
#+end_src

~ns-use-native-fullscreen~ should make ~'(fullscreen . maximized)~ below behave exactly like clicking the green window button on macOS. But currently, [[https://github.com/railwaycat/homebrew-emacsmacport/issues/181][this doesn't seem to work on the Emacs port I'm using]]. Still, let's keep it in case it's fixed in the future.

#+begin_src elisp
(display-time-mode)
(unless (string-match-p "^Power N/A" (battery))
  (display-battery-mode))
(global-goto-address-mode)
#+end_src

New frames should be maximized by default.

#+begin_src elisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

Smooth scrolling please -- depending on the platform.

#+begin_src elisp
(if (not (fboundp #'pixel-scroll-precision-mode))
  ;; then
  (setq mac-mouse-wheel-smooth-scroll t)
  ;; else
  (setq
    pixel-scroll-precision-use-momentum t
    pixel-scroll-precision-large-scroll-height 40.0
    pixel-scroll-precision-interpolation-factor 30)
  (pixel-scroll-precision-mode))
#+end_src

** Recursive editing
Sounds like [[https://www.reddit.com/r/emacs/comments/2byaxs/eli5_recursive_editing_what_is_it_for_when_would/][it can be useful at times]]. However, in order to use it, you'd have to first define a binding for =recursive-edit=, because Doom+Evil ships with none by default. If you ever do enable it, enable recursive minibuffers too (e.g. open a file while searching for a command?).

#+begin_src elisp :tangle no
(setq! enable-recursive-minibuffers t)
(minibuffer-depth-indicate-mode)
#+end_src

* Doom-specific configuration
For font configuration, see also [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-do-i-change-the-fonts][here]].

If everything looks weirdly bold with BlexMono, try adding ~:weight 'book~. Some distributions of BlexMono use that as the default weight. Check in your installed fonts viewer app. Also, big font mode requires ~:size~ to be set explicitly, otherwise disabling it won't work. But since the optimal size is different on different machines, make it use whatever Emacs determined automatically.

#+begin_src elisp
(setq
  doom-font (font-spec :family "BlexMono Nerd Font" :size
              (condition-case nil
                (font-get (face-attribute 'default :font) :size)
                (error 12)))
  doom-variable-pitch-font (font-spec :family "Overpass")
  ;; You might also want to not scale the font size that much in zen mode.
  ;; +zen-text-scale 1
  doom-theme 'doom-one
  doom-themes-neotree-file-icons t)
#+end_src

I tried using EB Garamond as the variable pitch font, but it doesn't look right in zen mode, unfortunately, at least not on Linux :( The baseline is all jumpy. And I can't get the scale to match the mono font, it's too small.

TODO: See [[https://tecosaur.github.io/emacs-config/config.html#mixed-pitch][TEC's =mixed-pitch= config]] for tips on how to further tweak the faces in Zen mode.

* Fancy soft wrapping
The main point of using soft wrapping is to be able to wrap /within/ words (typically at punctuation marks), not just whitespace, without breaking any syntax. This is specifically desirable in Org Mode and achieved via a custom character category table, in combination with Visual Fill Column.

#+begin_src elisp
(setq dlukes/org-category-table (copy-category-table))
(dolist (char '(?- ?+ ?_ ?/ ?| ?\ ?. ?,))
  (modify-category-entry char ?| dlukes/org-category-table))

(add-hook! 'org-mode-hook
  (set-category-table dlukes/org-category-table)
  (setq-local word-wrap-by-category t)
  (visual-fill-column-mode))
#+end_src

When using Visual Fill Column, ~split-{width,height}-threshold~, which Doom tweaks, don't really work as intended unless ~visual-fill-column-enable-sensible-window-split~ is set.

#+begin_src elisp
(setq!
  visual-fill-column-enable-sensible-window-split t
  visual-fill-column-center-text t)
#+end_src

The one drawback of Visual Fill Column is that since it works by growing the margin, there's [[https://github.com/joostkremers/visual-fill-column/issues/11][no way to let some lines remain longer]], which would be useful e.g. for images or tables. For images at least, [[https://codeberg.org/joostkremers/visual-fill-column/issues/2][resizing to fit]] is tracked as a wanted feature, and constitutes an acceptable workaround. For tables, something like [[https://github.com/misohena/phscroll][misohena/phscroll]] might make sense, but unfortunately, that particular package doesn't play nice with my setup (possibly because of Visual Fill Column?).

The legacy solution for "soft-wrapping at fill-column" was [[https://emacshorrors.com/posts/longlines-mode.html][Long Lines Mode]], which inserted magic newlines into the buffer which never made it to disk. This might have worked better with tables and images, but on the other hand, it was hacky and complicated and might have broken other aspects which I'm relying on. E.g. soft breaking elsewhere than just on whitespace -- would that work with those magic newlines? And if so, would the magic newlines in these places interfere with parsing and syntax highlighting?

* Org Mode
** Directories and other variables that need to be set before Org loads
#+begin_src elisp
(setq!
  org-directory "~/Desktop/org/"
  org-attach-id-dir (expand-file-name "attach/" org-directory)
  org-cite-csl-styles-dir "~/.local/share/zotero/styles"

  ;; The new default is text-properties and it has better performance, but until
  ;; third-party packages (e.g. Evil, Org-roam) adapt, it might break fontification, so
  ;; let's stick with overlays for now. Has to be set before Org loads. TODO: Eventually
  ;; switch. See (especially comments by yantar92):
  ;; - https://github.com/org-roam/org-roam/issues/2198
  ;; - https://github.com/emacs-evil/evil/issues/1630
  ;; - https://github.com/emacs-evil/evil/issues/1630#issuecomment-1406169113
  ;; - https://github.com/doomemacs/doomemacs/issues/6478#issuecomment-1406167570
  org-fold-core-style 'overlays)
#+end_src

** Editing and UI
Why the hell do some of the ~org-file-apps-gnu~ default to ~mailcap~ of all things, instead of ~xdg-open~?  Anyway...

#+begin_src elisp
(after! org
  (setcdr (assq 'system org-file-apps-gnu) "xdg-open %s")
  (setcdr (assq t org-file-apps-gnu) "xdg-open %s")

  (setq!
    ;; If you want Org file links to work in exports, you need to use IDs, not the
    ;; default path + text search flavor. This setting automatically generates an ID on
    ;; link creation (if necessary).
    org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id
    ;; When you store a link while a visual region is selected, the link will contain
    ;; the region as search string after ::.
    org-link-context-for-files t

    ;; Indent mode -- cf. also advice around org-align-tags below.
    ;;
    ;; You *do* want to use org-indent-mode by default, but only to have nice
    ;; indentation in soft-wrapped lists.
    org-startup-indented t
    ;; You don't want additional visual indentation before headings or content.
    org-indent-indentation-per-level 0
    ;; You *do* want additional *physical* indentation for property drawers, clock lines
    ;; and such...
    org-adapt-indentation 'headline-data
    ;; ... in spite of org-indent-mode.
    org-indent-mode-turns-off-org-adapt-indentation nil
    org-blank-before-new-entry '((heading . nil) (plain-list-item . nil))

    org-pretty-entities t
    org-startup-with-inline-images t
    org-display-remote-inline-images 'cache
    ;; Cf. below on why this is commented out.
    ;; org-image-actual-width '(600)
    org-fontify-quote-and-verse-blocks nil

    ;; Put footnotes at the end of the section they're in. This keeps them closer to the
    ;; text they refer to, which has both advantages and disadvantages (potential
    ;; clutter), but the key thing is that this makes refiling across files safer: with
    ;; a separate footnote section, you have to remember to move the footnotes manually.
    ;; Conversely, when re-arranging text within a single file and the footnote
    ;; reference and definition end up under different headings, it's not a problem:
    ;; just normalize the footnotes to renumber them and send them to their correct
    ;; spots. NOTE: If you *do* want a separate footnote section at some point, set this
    ;; e.g. to "Footnotes" (the section itself is ignored during export), not t!
    org-footnote-section nil
    org-footnote-auto-adjust t
    ;; Set to nil to stop turning CSL references into links. This can be useful if
    ;; you're using colorlinks in LaTeX and want the text to be less noisy, or also
    ;; because links are fragile commands and you don't want to have to deal with
    ;; compilation errors when you put references e.g. in captions.
    org-cite-csl-link-cites t)

  ;; Entity tweaks.
  (dolist
    (item '(
             ;; Make export of asterisks and stars more consistent across backends.
             ("ast" "\\ast" t "&ast;" "*" "*" "*")
             ("lowast" "\\ast" t "&lowast;" "*" "*" "∗")
             ("star" "\\star" t "&star;" "*" "*" "☆")
             ("starf" "\\star" t "&starf;" "*" "*" "★")
             ("sstarf" "\\star" t "&sstarf;" "*" "*" "⋆")
             ()
          ))
    (add-to-list 'org-entities-user item)))
#+end_src

There's many different ways to set =org-image-actual-width=, none of which unfortunately quite fit how I would like it to behave:

1. If =#+attr_org: :width= is set, use that.
2. Otherwise, if image is narrower than =org-image-actual-width=, use original width.
3. Otherwise, resize to =org-image-actual-width=.

Setting it to a list with a single number comes close, but skips 2, thereby stretching small images. Still, it might be useful to occasionally set this at the subtree level by using the =:ORG-IMAGE-ACTUAL-WIDTH:= property (in a property drawer).

So instead, let's have a piece of advice that checks the width of images being inserted, and adds =#+attr_org: :width= if necessary:

#+begin_src elisp
(setq dlukes/max-image-width 600)
(defun dlukes/image-width-attr (file)
  (when (> (car (image-size
                  (create-image (expand-file-name file))
                  'pixels))
          dlukes/max-image-width)
    dlukes/max-image-width))

(defadvice! dlukes/org-max-image-width (oldfun link &optional description)
  "Limit image width via #+attr_org: :width to play nicely with visual-fill-column."
  :around 'org-link-make-string
  (concat
    (if-let ((_ (string-match
                  (rx string-start
                    "file:"
                    (group-n 1 (*? anychar) (or "png" (seq "jp" (? "e") "g") "gif"))
                    string-end)
                  link))
              (path (match-string 1 link))
              (width (dlukes/image-width-attr path)))
      (format "#+attr_org: :width %d\n" width)
      "")
    (funcall oldfun link description)))
#+end_src

To be able to store links to Emacs Info pages. Enabled by default in vanilla Org, but Doom disables it.

#+begin_src elisp
(use-package! ol-info
  :after org)
#+end_src

*** Tags
#+begin_src elisp
(after! org
  (setq!
    org-tag-persistent-alist
    '(
       ;; Explicitly select/exclude headings for/from export. See *Export settings* in
       ;; the Org manual.
       (:startgroup . nil) ("export" . ?e) ("noexport" . ?n) (:endgroup . nil)
       ;; Export only contents, ignoring headline (the ox-extra ignore-headlines must be
       ;; activated).
       ("ignore" . ?i)
    )))
#+end_src

Right-align Org tags based on whatever EditorConfig sets as the fill-column, but leave room for the three dots that are added in folded views.

#+begin_src elisp
(add-hook! 'editorconfig-after-apply-functions
  (setq-local org-tags-column (- 3 fill-column)))
#+end_src

One last bit of tweaking for how I want ~org-indent-mode~ to work. Turns out tag alignment is broken (or badly configured in my case?) in combination with ~org-indent-mode~: nested headings add indentation to the tag column. You don't want that. TODO: Investigate root cause and possibly report?

#+begin_src elisp
(defadvice! dlukes/fix-org-align-tags-under-org-indent-mode (oldfun &rest r)
  "Turn off org-indent-mode when aligning tags, to prevent additional indentation."
  :around 'org-align-tags
  (if (not org-indent-mode)
    (apply oldfun r)
    (org-indent-mode -1)
    (apply oldfun r)
    (org-indent-mode)))
#+end_src

*** (Tempo) templates
These can be used with both =C-c C-,= and =<=-style tempo templates, but for the latter, you'll probably need to switch auto-completion to manual, so that =TAB= isn't hijacked by the completion menu when 2 or more characters are available at point.

#+begin_src elisp
(after! org
  (dolist (template '(
                       ("sb" . "src bash")
                       ("sd" . "src dash")
                       ("se" . "src elisp")
                       ("sf" . "src fish")
                       ("sp" . "src jupyter-python")
                       ("sr" . "src jupyter-R")
                       ("ss" . "src sh")
                    ))
    (add-to-list 'org-structure-template-alist template)))
#+end_src

I like =<= better when I already know the key, =C-c C-,= is a bit finger-twisty, although nice for discoverability OTOH.

#+begin_src elisp
(use-package! org-tempo
  :after org)
#+end_src

*** UI add-on packages
#+begin_src elisp
(use-package! org-modern
  :after org
  :config
  (setq!
    ;; org-modern-star nil
    org-modern-hide-stars nil
    ;; org-modern adds spaces around each tag, which messes up my careful
    ;; configuration of org-tags-column above
    org-modern-tag nil
    org-modern-horizontal-rule
    (concat
      (make-string 32 ?\s) (make-string 24 ?─) (make-string 32 ?\s))
    org-modern-checkbox nil)
  (global-org-modern-mode))
#+end_src

** Export
#+begin_src elisp
(after! ox
  (setq!
    ;; Async export nil by default, so that opening after export works. Toggle to t when
    ;; working on a file that takes a while to export, which you keep open and just
    ;; refresh. SPC t a, or possibly with a buffer-local variable.
    ; org-export-in-background nil
    ;; Allow `#+bind: variable value' directives. Useful for tweaking variables you
    ;; can't set via #+options or other keywords.
    org-export-allow-bind-keywords t
    ;; Don't export _ and ^ as sub/superscripts unless wrapped in curly brackets. Use
    ;; #+OPTIONS: ^:t (or {} or nil) to tweak on a per-document basis.
    org-export-with-sub-superscripts '{}
    ;; Don't abort export because of broken links, just mark them. Don't enable this by
    ;; default, you probably want to be warned about broken links before possibly
    ;; forcing the export anyway.  Also, ID links can be fixed with
    ;; org-id-update-id-locations or org-roam-update-org-id-locations, so try that
    ;; first.
    ; org-export-with-broken-links 'mark
    ;; Many of the following export tweaks are at their default values, but just as a
    ;; reminder that they can be modified, either via variables or the options keyword.
    org-export-with-toc t
    org-export-with-date t
    org-export-with-author t
    org-export-with-email nil
    org-export-with-title t
    org-export-with-creator t
    org-export-with-tags t
    org-export-time-stamp-file t))

(use-package! ox-extra
  :after org
  :config
  ;; Put an :ignore: tag on a headline to only include its subtree contents, not the
  ;; headline itself, in exports. This is useful when you want some headlines to be used
  ;; just for organization or folding purposes, but not reflected in the final document
  ;; structure.
  (ox-extras-activate '(ignore-headlines)))
#+end_src

*** HTML
#+begin_src elisp :noweb yes :noweb-prefix no
(after! ox-html
  (setq!
    org-html-doctype "html5"
    org-html-self-link-headlines t
    org-html-style
    "<style>
<<org-html-head-css>>
</style>
<script>
<<org-html-head-js>>
</script>"
    ;; Can also set the following two to t and use org-html-{pre,post}amble-format,
    ;; which can even be a function for fine-grained control. See
    ;; org-html--build-pre/postamble for inspiration.
    org-html-preamble "<span id=\"lights\" onclick=\"darkModeToggle()\"><<sun-svg>></span>"
    org-html-postamble 'auto
    ;; Interactive code blocks, evaluated in browser. Can be occasionally useful, but
    ;; not by default.
    ; org-html-klipsify-src t
    org-html-head-include-scripts t
    org-html-wrap-src-lines t))
#+end_src

**** CSS and JS snippets
     :PROPERTIES:
     :VISIBILITY: folded
     :END:
#+name: org-html-head-css
#+begin_src css :tangle no
html {
  --fg: #333;
  --fg-light: #999;
  --bg: #fafafa;
  --hi: #4169e1; /* royalblue */
  transition: filter .5s ease;
}
html.dark {
  filter: invert(.9);
}
body {
  font-family: sans-serif;
  line-height: 1.5;
  background-color: var(--bg);
  color: var(--fg);
  display: flex;
  flex-flow: row wrap;
  align-items: flex-start;
  justify-content: center;
  gap: 1rem;
}
#preamble, #postamble {
  position: sticky;
  top: 1rem;
}
#lights {
  cursor: pointer;
}
#table-of-contents ul {
  list-style-type: none;
  padding-left: 0;
}
#content {
  max-width: 40rem;
  margin: revert;
  overflow: auto;
}

/* Various kinds of links. */
a {
  color: var(--hi);
  text-decoration: none;
}
a:hover {
  text-decoration: underline;
}
:is(h1, h2, h3, h4, h5, h6) a {
  color: var(--fg);
  text-decoration: none;
}
:is(h1, h2, h3, h4, h5, h6) a:hover {
  text-decoration: none;
}
:is(h1, h2, h3, h4, h5, h6) a:hover::after {
  content: ' §';
  color: var(--fg-light);
}
#table-of-contents a {
  color: var(--fg-light);
}
#table-of-contents a:hover {
  color: var(--hi);
  text-decoration: none;
}

/* Source blocks. */
pre.src {
  counter-reset: line;
  padding-left: 0;
}
pre.src code::before {
  counter-increment: line;
  content: counter(line);
  color: var(--fg-light);
  width: 2em;
  display: inline-block;
  text-align: right;
  padding-right: .5em;
  margin-right: .5em;
  border-right: 1px solid #bbb;
}

/* Figures. */
.figure img {
  max-width: 100%;
}
#+end_src

TODO: I originally found the SVG icons [[https://fhur.me/posts/always-use-closed-open-intervals][here]], not entirely sure what their licensing situation is, replace them with unequivocally free ones at some point.

#+name: sun-svg
#+begin_src svg :tangle no
<svg fill=\"none\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\"></path></svg>
#+end_src

#+name: moon-svg
#+begin_src svg :tangle no
<svg fill=\"none\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\"></path></svg>
#+end_src

#+name: org-html-head-js
#+begin_src js :tangle no :noweb yes
function darkModeToggle() {
  var dark = 'dark';
  var dcl = document.documentElement.classList;
  var lights = document.getElementById('lights');
  if (dcl.contains(dark)) {
    lights.innerHTML = '<<sun-svg>>';
    dcl.remove(dark);
  } else {
    lights.innerHTML = '<<moon-svg>>';
    dcl.add(dark);
  }
}

document.addEventListener('DOMContentLoaded', function() {
  if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
    darkModeToggle();
  }
  var toc = document.getElementById('table-of-contents');
  if (toc !== null) {
    document.getElementById('postamble').appendChild(toc);
  }
}, false);
#+end_src

*** LaTeX
#+begin_src elisp
(after! ox-latex
  (setq!
    org-latex-tables-booktabs t
    ;; Default theme, options etc. can be tweaked, see variable's documentation.
    ;; Per-file and per-block options are also available, see
    ;; https://blog.tecosaur.com/tmio/2022-05-31-folding.html.
    org-latex-src-block-backend 'engraved
    org-latex-compiler "lualatex"
    org-latex-pdf-process
    ;; Possibly add -f -interaction=nonstopmode to ignore recoverable errors, but
    ;; typically, it's better to deal with those ASAP.
    '("latexmk -pdf -%latex -output-directory=%o %f")
    ;; cleveref/cref is nice in theory (it auto-inserts Fig./Tab. etc. based on the type
    ;; of reference), but since it's LaTeX-specific and I might need to export to ODT or
    ;; DOCX too, better not rely on it.
    ;; org-latex-reference-command "\\cref{%s}"
    org-latex-packages-alist
    '(
      ;; ("capitalize" "cleveref")
      ("" "fontspec" t)
      ("" "unicode-math" t)
      ("" "microtype" t)
      ("czech,french,american,AUTO" "babel" t)
      ("" "enumitem" t)
      ("" "xurl" t)
      ("toc,eqno,enum,bib,lineno" "tabfigures" t)
      ;; Results in option clash for beamer, enable as needed. The table option is for
      ;; colors inside tables, as generated e.g. by Pandas Styler.
      ;; ("usenames,dvipsnames,table" "xcolor" t)
      ("" "booktabs" t)
      ("" "tabularx" t)
      ("autostyle" "csquotes" t)
    )))
#+end_src

If this leads to an error, install TeX Live and update Doom so that it notices that you have LaTeX support. Remember you can control the order of inclusion of (default) packages and extra header lines, and even entirely prevent it. See documentation for ~org-latex-classes~.

#+begin_src elisp
(after! ox-latex
  (setq!
    ;; Don't load amssymb, as it conflicts with unicode-math.
    org-latex-default-packages-alist
    (seq-filter
      (lambda (package) (not (string= "amssymb" (nth 1 package))))
      org-latex-default-packages-alist)
    org-latex-default-class "scrartcl")
  ;; The intended use of the custom-* classes is that you'll put a custom.cls file or
  ;; symlink in the same dir as the source text, so that you can keep the same heading
  ;; mappings for all classes of the same broad kind (article, book, etc.). Basically,
  ;; custom.cls can simply just contain whatever you'd put in the header of your .tex
  ;; file, except instead of \documentclass, it needs to invoke \LoadClass.
  (let ((class-format "
\\documentclass{%s}
[DEFAULT-PACKAGES]
[PACKAGES]
\\frenchspacing
\\setlist{nosep}  %% tight lists
\\setmainfont{EB Garamond}
\\setmathfont{Garamond-Math}[Scale=MatchLowercase]
%% For glyphs missing from Garamond-Math, if you need to define more, see:
%% https://mirrors.nic.cz/tex-archive/macros/unicodetex/latex/unicode-math/unimath-symbols.pdf
\\setmathfont{XITS Math}[
  range={\\mdsmwhtsquare}
]
%% Unfortunately, neither Fira Mono nor IBM Plex Mono have phonetic glyphs.
\\setsansfont{Source Sans 3}[Scale=MatchLowercase]
\\setmonofont{Source Code Pro}[Scale=MatchLowercase]
\\AtBeginEnvironment{tabular}{\\addfontfeatures{Numbers={Monospaced}}}
%% \\clubpenalty         = 10000
%% \\widowpenalty        = 10000
%% \\displaywidowpenalty = 10000
%% typographically better, but different than Word
%% \\onehalfspacing
%% uglier (too spread), but Word-compatible
%% \\setspace{1.5}
%% amssymb aliases for unicode-math commands:
\\newcommand{\\square}{\\mdsmwhtsquare}
[EXTRA]
")
         (custom-class-format
           "\\documentclass{custom-book}\n[NO-DEFAULT-PACKAGES]\n[NO-PACKAGES]")
         (article-structure
           '(("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
           ("\\paragraph{%s}" . "\\paragraph*{%s}")
           ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
         (book-structure
           '(("\\chapter{%s}" . "\\addchap{%s}")
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
           ("\\paragraph{%s}" . "\\paragraph*{%s}")
           ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
    (pcase-dolist
      (`(,class ,format ,structure) `(
               ("scrartcl" ,class-format ,article-structure)
               ("scrbook" ,class-format ,book-structure)
               ("custom-article" ,custom-class-format ,article-structure)
               ("custom-book" ,custom-class-format ,book-structure)))
          (add-to-list 'org-latex-classes (append (list class (format format class)) structure)))))
#+end_src

*** ODT
#+begin_src elisp
(after! ox-odt
  (setq!
    ;; Don't prefix figure, table etc. numbers with section numbers.
    org-odt-display-outline-level 0
    org-latex-to-mathml-convert-command "pandoc -f latex -t html5 --mathml %I -o %o"
    ;; This can be used to include *any* LaTeX in ODT exports as PNG images.
    ;; Unfortunately, it can't be used in conjunction with the MathML convert command
    ;; above as it overrides it and equations are also rendered as PNG, which is
    ;; suboptimal.
    ; org-odt-with-latex 'dvipng
    ;; Use this to convert the resulting ODT to a different format and use that as
    ;; the result of the export instead. See org-odt-convert-process(es) for how to
    ;; define the way this conversion should happen. By default, soffice is used, but
    ;; you could conceivably use Pandoc as well.
    ; org-odt-preferred-output-format "docx"
))
#+end_src

*** Reveal.js
#+begin_src elisp
(after! org-re-reveal
  (setq!
    ;; Custom CSS could also be specified inline using org-re-reveal-head-preamble, but
    ;; syntax highlighting is nice and the gotchas of complicated Elisp strings
    ;; are annoying. If a presentation needs some custom CSS, specify both this
    ;; stylesheet and the additional one(s) via the #+REVEAL_EXTRA_CSS keyword.
    org-re-reveal-extra-css "~/.files/emacs/org-re-reveal-extra.css"))
#+end_src

In reveal.js, you can't link to the individual bibliography items, so there's a filter which replaces them with links to the overall bibliography slide instead.

#+begin_src elisp
(use-package! org-re-reveal-citeproc
  :after org-re-reveal
  :config
  (add-to-list 'org-export-filter-paragraph-functions
    #'org-re-reveal-citeproc-filter-cite))
#+end_src

** Code blocks and Babel
Remember that in Doom Emacs, it's not necessary to configure Babel manually with ~org-babel-do-load-languages~. Just enable support for the given language via [[file:~/.config/doom/init.el][init.el]].

Defaulting to =:results scalar= will prevent any fancy conversion of the output to Org tables by default, which is just confusing and hampers readability. If required, you can request it by explicitly overriding =:results= with =table= or =list=. See [[info:org#Results of Evaluation][org#Results of Evaluation]] for other options.

With emacs-jupyter, you might expect that using the =:text/plain= mime type alone would prevent this sort of prettification, but no (probably to act as similar to regular code blocks as possible?). [[file:~/.config/emacs/.local/straight/repos/emacs-jupyter/jupyter-org-client.el::cl-defmethod jupyter-org-result :around ((_mime (eql :text/plain)) _content params][This]] =:around= method on ~jupyter-org-result~ performs the prettification, unless =:results scalar= is set, so luckily, the same solution applies.

#+begin_src elisp
(after! org-src
  (setq!
    org-coderef-label-format "# (ref:%s)"))

(after! ob-core
  (setcdr (assq :results org-babel-default-header-args) "replace scalar")
  (setcdr (assq :exports org-babel-default-header-args) "both")
  (setq!
    ;; In addition to setting these in src block headers, you can also put them into
    ;; property drawers or #+property: directives via :header-args:jupyter-python:. This will
    ;; then affect all matching src blocks in scope (subtree or file).
    org-babel-default-header-args:jupyter-python
    '((:kernel . "python3")
      ;; Code in notebooks is typically evaluated as you work, no need to
      ;; re-evaluate on export. Or you can always do it on demand with
      ;; org-babel-execute-buffer.
      (:eval . "no-export")
      ;; Careful! This uses the same session for any block in any file by default. Set a
      ;; custom session via header-args when isolation and reproducibility matter.
      (:session . "py")
      (:async . "yes"))
    org-babel-default-header-args:jupyter-R
    '((:kernel . "ir")
      (:eval . "no-export")
      (:session . "R")
      (:async . "yes"))))
#+end_src

*** Emacs Jupyter
#+begin_src elisp
;; Temporary workaround for https://github.com/nnicandro/emacs-jupyter/issues/436.
;; TODO: Revert once no longer necessary.
(setenv "PYDEVD_DISABLE_FILE_VALIDATION" "1")

(defadvice! dlukes/jupyter-max-image-width (oldfun file width height)
  "Limit image width via #+attr_org: :width to play nicely with visual-fill-column."
  :around 'jupyter-org-image-link
  (funcall oldfun file (dlukes/image-width-attr file) height))

(after! ob-jupyter
  (setq!
    jupyter-org-mime-types
    (let* ((grouped-mimes
            (seq-group-by
              (lambda (mime) (string-prefix-p ":image" (symbol-name mime)))
              ;; Doom removes :text/html, but it might be hand occasionally, so
              ;; let's make sure it's there.
              (append jupyter-org-mime-types '(:text/html))))
           (image-mimes (cdr (car grouped-mimes)))
           (text-mimes (cdr (nth 1 grouped-mimes))))
      ;; Default to displaying an image, and failing that, the plain text
      ;; representation I'm used to and which should always be available (note
      ;; that :results scalar also has to be set to prevent "prettification" of
      ;; text/plain output, see above). The remaining mime types can be selected
      ;; via the :display header arg as needed.
      (seq-uniq (append image-mimes '(:text/plain) text-mimes)))))
#+end_src

Make sure error output via =emacs-jupyter= has ANSI color sequences fontified. TODO: Periodically check if this is still required. Last check: [2022-09-18], without =org-superstar-mode=. Related issues:

- https://github.com/nnicandro/emacs-jupyter/issues/366
- https://github.com/nnicandro/emacs-jupyter/issues/380

#+begin_src elisp
(defun dlukes/display-ansi-colors ()
  (ansi-color-apply-on-region (point-min) (point-max)))
(add-hook! 'org-babel-after-execute-hook #'dlukes/display-ansi-colors)
#+end_src

** Org-roam
#+begin_src elisp
(after! org-roam
  (setq!
    org-roam-capture-templates
    '(
      ;; Should be same as stock, with different key.
      ("n" "default" plain nil
        :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}")
        :unnarrowed t)
      ("t" "tagged" item "- tags :: %?"
        :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}")
        :empty-lines-before 1
        :unnarrowed t)
      ("d" "date" entry "* %^u\n%?"
        ;; There's also a file+datetree target, but that feels unnecessarily verbose --
        ;; hierarchical, always adds an ID.
        :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}")
        :empty-lines-before 1
        :unnarrowed t))
    org-roam-dailies-capture-templates
    '(("d" "default" entry "* %U %?"
        :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>")
        :empty-lines-before 1
        :unnarrowed t))))

(use-package! websocket
  :after org-roam)
(use-package! org-roam-ui
  :after org-roam
  ;; This is just for reference, I can't currently think of a reasonable hook to use.
  ;; This would open ORUI each time the backlinks buffer is toggled -- no.
  ; :hook (org-roam-mode . org-roam-ui-open)
  ;; This would launch the ORUI server when Org Mode is activated -- probably not
  ;; necessary.
  ; :hook (org-mode . org-roam-ui-mode)
  ;; The best thing to do is probably to just have a handy keyboard shortcut to invoke
  ;; ORUI when I want it (see below).
  :config
  (setq!
    org-roam-ui-sync-theme t
    org-roam-ui-follow t
    org-roam-ui-update-on-save t
    org-roam-ui-open-on-start t))
#+end_src

When Org-roam tries to render images in the backlinks buffer but can't find them, the filename gets interpreted as a base64 string, which results in an error and rendering of the buffer halts, with the remaining backlinks not shown.

Attachments are looked up via the ID of their parent node. So what are the typical reasons why an attachment can't be found?

Maybe the image has been refiled under a different ID and the attachment hasn't been moved. Automatic moving of attachments on refile may be implemented in Org-roam in the future, but isn't currently.

But more generally, maybe the whole mechanism of attachment lookup fails in the backlinks buffer -- maybe the node ID isn't correctly set in that context. Maybe it's Doom's fault, Doom customizes the attachment system, using a single global dir.

At any rate, I don't really care if the backlinks buffer doesn't show images (maybe I even prefer that it doesn't), but I /do/ care if it doesn't show all the backlinks due to an error. So demote the error to a warning message. This also means that Org buffers with broken attachment links will still fully initialize, which is also nice.

#+begin_src elisp
(defadvice! no-errors/+org-inline-image-data-fn (_protocol link _description)
  "Interpret LINK as base64-encoded image data. Demote errors to warnings."
  :override #'+org-inline-image-data-fn
  (with-demoted-errors
    "Error rendering inline image (parent node ID changed or Org-roam backlink buffer?): %S"
    (base64-decode-string link)))
#+end_src

* Citar
#+begin_src elisp
(defadvice! dlukes/citar-file-trust-zotero (oldfun &rest r)
  "Leave Zotero-generated file paths alone, especially zotero://..."
  :around '(citar-file-open citar-file--find-files-in-dirs)
  (cl-letf (((symbol-function 'file-exists-p) #'always)
            ((symbol-function 'expand-file-name) (lambda (first &rest _) first)))
    (apply oldfun r)))

(defadvice! dlukes/citar-use-bib-export-for-local-bib-file (oldfun &rest r)
  "Local bib file generation requires a BibLaTeX export instead of CSL JSON."
  :around #'citar-export-local-bib-file
  (let ((citar-bibliography '("~/.cache/zotero/My Library.bib")))
    (apply oldfun r)))

(setq!
  ;; Citar uses Vertico as its selection engine, and I want selection to be case
  ;; insensitive. Vertico is compatible with Emacs's default completion system, so this
  ;; is covered by completion-ignore-case above.
  citar-bibliography '("~/.cache/zotero/My Library.json")
  citar-notes-paths '("~/Desktop/org/roam/reading-notes"))

(after! citar
  (dolist
    (ext '("pdf" "odt" "docx" "doc"))
      (add-to-list 'citar-file-open-functions `(,ext . citar-file-open-external))))
#+end_src

* Other packages
#+begin_src elisp
(after! embark
  (setq!
    ;; NOTE: This is the default, putting this here mainly to remind myself of
    ;; embark-act (bound to C-; or SPC a) and of the fact that this setting can be
    ;; toggled per invocation. By default, it's done using the C-u universal prefix
    ;; argument, but that is rebound by Doom to <(alt-)leader>-u because Evil gives C-u
    ;; its Vim meaning (scroll up in normal mode, delete to beginning of line in
    ;; insert). However, these bindings do not work while in the mini-buffer. Instead,
    ;; the embark menu binds q to to toggle embark-quit-after-action, which is even more
    ;; convenient (you don't have to remember up front and twist your fingers on the
    ;; CTRL key).
    embark-quit-after-action t))

(after! writeroom-mode
  (setq! writeroom-width 40))

(after! magit
  (setq!
    ;; Word-granularity diffs can be noisy when the algorithm tries too hard in places
    ;; where it doesn't make sense. Can be toggled with "SPC g w" (see below) if needed.
    magit-diff-refine-hunk nil
    magit-revision-show-gravatars '("^Author:     " . "^Commit:     ")))

(after! lsp-mode
  (setq!
    ;; lsp-mode options for rust-analyzer are detailed at
    ;; https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer
    lsp-rust-analyzer-server-display-inlay-hints t
    lsp-rust-analyzer-display-chaining-hints t
    lsp-rust-analyzer-display-parameter-hints t))

(after! company
  (setq!
    ;; Company completion can be slow, especially in long-running sessions with lots of
    ;; (Org-roam?) buffers open. This makes typing extremely annoying. So don't trigger
    ;; automatically, use C-SPC to bring it up as required.
    company-idle-delay nil))

(add-hook! 'elfeed-search-mode-hook #'elfeed-update)
#+end_src

** Spell checking
Spell-fu may be faster than Flyspell and [[https://codeberg.org/ideasman42/emacs-spell-fu][looking at the readme]], it even supports multiple languages, unlike what the Doom module docs claim. However, it has other drawbacks, mostly papercuts, but still:

- Can't use ~ispell-change-dictionary~ to change the dictionary. AFAICS, there are only functions for adding/removing dictionaries to the list of active dicts, and they aren't interactive.
- In general, just light integration with standard ispell configuration. Only some variables are recognized, and honored only some of the time. For instance, I think you can't override the dict via local values for ~ispell-dictionary~.
- For Czech, the pre-generated word list cache is huge and takes a while to create.
- No equivalent of ~flyspell-prog-mode~, to only spellcheck comments in programming modes.
- No point-and-click error correction interface, must invoke =M-x +spell/correct= (=z==) manually, and =M-x +spell/add-word= (=zg=) and =M-x +spell/remove-word= (=zw=) for editing the personal dictionary.

As for the backend, aspell is superior to Hunspell, [[https://battlepenguin.com/tech/aspell-and-hunspell-a-tale-of-two-spell-checkers/][at least for English]], but unfortunately just lightly maintained and less used, probably because of licensing issues. Still, prefer it if possible.

Spell checking should be available, but not enabled by default, so remove the hooks added by [[file:~/.config/emacs/modules/checkers/spell/config.el::(use-package! flyspell ; built-in][the Doom module]]:

#+begin_src elisp
(remove-hook! '(org-mode-hook
                 markdown-mode-hook
                 TeX-mode-hook
                 rst-mode-hook
                 mu4e-compose-mode-hook
                 message-mode-hook
                 git-commit-mode-hook)
  #'flyspell-mode)
(remove-hook! '(yaml-mode-hook
                 conf-mode-hook
                 prog-mode-hook)
  #'flyspell-prog-mode)
#+end_src

I use [[http://app.aspell.net/create][custom SCOWL dictionaries for English]] and a personal dictionary shared across devices, placed in [[file:~/Desktop/data/aspell][a non-standard location]]. I've tried configuring the location via ~ispell-aspell-{dict,data}-dir~, but it doesn't quite seem to do the trick, and ultimately, I don't really want to completely override the system aspell files (I'd have to copy over a ton of supporting files, plus for other languages, I'm happy using the system-provided dictionaries), I just want to add additional dictionaries. So I tweak the =ASPELL_CONF= env var instead, which has the advantage of also affecting command-line invocations of aspell, if I ever need that, and ispell luckily seems to pick up on dict aliases added in there. There's also =~/.aspell.conf=, but unfortunately, I don't think there's a way to set a path relative to the home directory, which I need.

So the only thing that remains is picking a default dictionary, and setting a personal dictionary, as ispell can't read that from the =ASPELL_CONF=:

#+begin_src elisp
(setq!
  ispell-personal-dictionary "~/Desktop/data/aspell/en_US-custom-80.pws"
  ispell-dictionary "en_US-custom-80")
#+end_src

With a personal dictionary set, you'll run into an error when [[https://lists.gnu.org/archive/html/help-gnu-emacs/2013-11/msg00151.html][switching to a language different from the one of the personal dict]]. So let's make sure an appropriate ~ispell-local-pdict~ is set whenever ~ispell-local-dictionary~ changes:

#+begin_src elisp
(add-variable-watcher 'ispell-local-dictionary
  (lambda (_symbol new-dict _operation _where)
    (setq ispell-local-pdict (concat "~/Desktop/data/aspell/" new-dict ".pws"))))
#+end_src

* Custom interactive functions
#+begin_src elisp
(defun dlukes/ediff-doom-config (file)
  "ediff the current config with the examples in doom-emacs-dir

There are multiple config files, so FILE specifies which one to
diff.
"
  (interactive
    (list (read-file-name "Config file to diff: " doom-private-dir)))
  (let* ((stem (file-name-base file))
         (customized-file (format "%s.el" stem))
         (template-file-regex (format "^%s.example.el$" stem)))
    (ediff-files
      (concat doom-private-dir customized-file)
      ;; The templates are in various places unfortunately, so let's do a recursive
      ;; search on the repo, that should work reliably.
      (car
        (directory-files-recursively
          doom-emacs-dir
          template-file-regex
          nil
          ;; The naming of path manipulation in Emacs Lisp is a mess. We want to
          ;; match against the last part of the path, which is what
          ;; file-name-nondirectory is for, but only if the path doesn't end with /,
          ;; because the function is meant for regular files only. So if the last
          ;; portion of the path is a directory, ending in /, you have to convert to
          ;; a "directory file name" (I kid you not, that's the language the docs
          ;; use) with directory-file-name, stripping the / suffix, so that you can
          ;; use file-name-nondirectory on it. However, the paths that are passed to
          ;; our predicate lambda, although exclusively directories, do NOT have the
          ;; / suffix (yay for consistency I guess?), so we can directly call
          ;; file-name-nondirectory to get the last path element.
          (lambda (d) (not (string-prefix-p "." (file-name-nondirectory d)))))))))

(defun dlukes/make-toggle (sym)
  (lambda ()
    (interactive)
    (set sym (not (symbol-value sym)))
    (message "Toggling %s to %s" sym (symbol-value sym))))
#+end_src

* Keyboard mappings
GNOME Shell might be stubborn in reverting back to using =M-SPC= as a keyboard layout switching shortcut. If it does, just explicitly switch it to =Win-SPC= in GNOME Tweaks, so that you can use Doom's default (local)leader alt key bindings.

#+begin_src elisp
(after! evil-escape
  (setq evil-escape-key-sequence "fd"))

(use-package! hydra)
(defhydra dlukes/hydra-zen (:timeout 4)
  "Adjust the width of the zen mode writing area"
  ("+" writeroom-increase-width "wider")
  ("-" writeroom-decrease-width "narrower")
  ("0" writeroom-adjust-width "reset")
  ("q" nil "done" :exit t))
#+end_src

Cf. =SPC h f map!=. Use stuff like =:n= immediately before a mapping for Evil state (Vim mode) specific keymaps. Also, glean inspiration from the official key binding definitions, e.g. in:

- [[file:~/.config/emacs/lisp/doom-keybinds.el]]
- [[file:~/.config/emacs/modules/config/default/+evil-bindings.el]]

#+begin_src elisp
(map! :leader
  :desc "Run ex command" "SPC" #'evil-ex
  :desc "Switch to last buffer" "TAB" #'evil-switch-to-windows-last-buffer
  (:prefix ("+" . "hydra")
    :desc "Adjust zen width" "z" #'dlukes/hydra-zen/body)
  (:prefix ("g" . "git")
    :desc "Toggle word diff" "w" #'magit-diff-toggle-refine-hunk)
  (:prefix ("h" . "help")
    (:prefix ("d" . "doom")
      "D" #'dlukes/ediff-doom-config))
  (:prefix ("n" . "notes")
    (:prefix ("r" . "roam")
      :desc "Show graph" "g" #'org-roam-ui-open))
  (:prefix ("w" . "window")
    ;; Shuffle around window-switching functions so that ace-window is the easiest to
    ;; access.
    "w" #'ace-window
    "W" #'evil-window-next
    "C-w" #'evil-window-prev
    "o" #'delete-other-windows)

  ;; Workspaces are also easily manipulated with other default key bindings:
  ;;
  ;; - Ctrl/Cmd-T         ->  Create new workspace
  ;; - Ctrl/Cmd-Shift-T   ->  Display workspace tab bar
  ;; - Ctrl/Cmd-<number>  ->  Switch to workspace <number>
  :desc "workspace" "W" doom-leader-workspace-map)
#+end_src

When adding to an existing keymap under leader, don't add =:leader=, otherwise it won't work.

#+begin_src elisp
(map! :map doom-leader-toggle-map
  "a" (dlukes/make-toggle 'org-export-in-background)
  "e" #'org-toggle-pretty-entities
  "v" #'visual-fill-column-mode)
;; :desc apparently doesn't work when assigning to an existing map under :leader, see
;; https://github.com/doomemacs/doomemacs/issues/5532#issuecomment-991611197, so add
;; descriptions separately.
(which-key-add-key-based-replacements "SPC t a" "Async Org export")
#+end_src

But when adding to an existing keymap under /localleader/, =:localleader= is apparently
required!

#+begin_src elisp
(after! org
  (map! :map org-mode-map :localleader
    :desc "babel" "v" org-babel-map))
#+end_src
