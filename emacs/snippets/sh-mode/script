# -*- mode: snippet; require-final-newline: nil -*-
# name: script
# key: script
# --
#!/usr/bin/env zsh

# exit on error; this triggers the ZERR signal instead of any of the conventional signals, so all
# trap handlers should be aware of that!
set -e

# kill the shell's process group (= all background and foreground commands) on exit / termination
# etc. (first, convert other signals to EXIT to avoid an infinite loop caused by the kill)
trap exit INT TERM HUP ZERR
trap 'kill 0' EXIT

# unfortunately, the above causes a non-zero exit code when the script is called by another script
# (presumably because the parent script is killed as part of the process group on exit of the child
# script...?), so using explicit traps for each background job (see below) is a better idea, or
# maybe just restrict the process group kill to signals which cancel the script in the middle of its
# operation
trap 'kill 0' INT TERM HUP ZERR

dname=\${0:a:h}
bname=\${0:a:t}

# copy script stderr to logfile (via named pipe)
exec 2> >(tee -i logfile >&2)

function log {
  >&2 echo "[\$bname:\$(date +'%Y-%m-%d %H:%M:%S')] \$@"
}

function newline {
  >&2 echo
}

log Starting...

# YN stores the result, but it's not needed since read -q returns 1 if the users enters anything
# else than y or Y, so we exit because of set -e
read -q "YN?Are you sure (y or n)?"

# run command (group) in background and kill it on exit / termination etc.
{ sleep 10m && echo Waking up... } &
trap "kill \$!" EXIT TERM INT HUP ZERR

# run multiple commands in background, then wait for them to complete
sleep 2s &
sleep 3s &
sleep 5s &
wait

# mathematical comparisons
foo=4
(( foo == 4 )) && echo true

# regex comparisons
bar="foobarbaz"
[[ \$bar =~ "bar" ]] && echo true
! [[ \$bar =~ "qux" ]] && echo true

$0

log Done.
