# See e.g. "GitHub, f*ck your name change." (https://archive.ph/DGJDP).
# This config change was actually prompted by Git in turn now
# considering the same switch and spewing a warning each time I init a
# new repo unless I set this explicitly. But the same commentary
# applies.
[init]
  defaultBranch = master

[user]
  name = David Lukes
  email = dafydd.lukes@gmail.com
[sendemail]
  smtpServer = smtp.gmail.com
  smtpUser = dafydd.lukes@gmail.com
  smtpPass = xxx
  smtpEncryption = tls
  smtpServerport = 587
  # Create an app password <https://security.google.com/settings/security/apppasswords>,
  # paste it here as smtppass = xxx, send the patch, revert the paste and *revoke the
  # password*, so that even if you accidentally commit it, you don't give the keys to
  # your Google account to anyone on the internet, which is a bad idea™. Alternatively,
  # you can keep it around indefinitely in a separate config file which is included but
  # kept private. See [include] section at the end of the config file.

[core]
  quotePath = off
  # Convert CRLF (if any) to LF when committing, don't do any conversion (i.e., no LF →
  # CRLF) when checking out code.
  autocrlf = input
[color]
  ui = auto
[commit]
  verbose = true
[push]
  default = simple
  recurseSubmodules = check
  autoSetupRemote = true
[pull]
  rebase = true
[rebase]
  # Makes it easier to modify old commits. The basic workflow looks like this:
  #   git commit --fixup OLD_COMMIT_ID
  #   git rebase --autosquash main
  # The second command automatically combines all the fixup commits. This option allows
  # you to elide passing the --autosquash CLI option.
  autoSquash = true
  # Automatically run `git stash` prior to rebase, and `git stash pop` after.
  autoStash = true
[status]
  submoduleSummary = true
[submodule]
  recurse = true
[credential]
  helper = osxkeychain
[help]
  autocorrect = prompt

# Sorting most recent items last (prepend - to invert).
[branch]
  sort = -committerdate
[tag]
  sort = -taggerdate
# Also, break output into columns when appropriate.
[column]
  ui = auto

[alias]
  ll = log --pretty='%C(yellow)%h %C(blue)%ad %Cgreen%aN%C(auto)%d %Creset%s' --date=relative --date-order --graph
  # Alias suggestions from https://git-scm.com/book/en/v2/Git-Tools-Submodules to ease
  # working with submodules.
  sdiff = !git diff && git submodule foreach 'git diff'
  spush = push --recurse-submodules=on-demand
  supdate = submodule update --remote --merge

# Custom diff definitions. If necessary, the cache can be cleared
# manually with `git update-ref -d refs/notes/textconv/pandoc`. Default
# filetype associations can be set up in ./attributes and disabled via
# --no-textconv.
[diff "pandoc"]
  textconv = pandoc --to=markdown
  cacheTextconv = true
[diff "ipynb"]
  textconv = jupytext --to markdown -o -
  cacheTextconv = true

# Merging
[diff]
  # See also: https://luppeng.wordpress.com/2020/10/10/when-to-use-each-of-the-git-diff-algorithms/
  algorithm = histogram
  tool = vimdiff
  submodule = log
  wsErrorHighlight = all
  colorMoved = default
  colorMovedWS = allow-indentation-change
[difftool "vimdiff"]
  path = nvim
[merge]
  tool = vimdiff
  # See https://ductile.systems/zdiff3/
  conflictStyle = zdiff3
[mergetool "vimdiff"]
  path = nvim
# rerere = reuse recorded resolution. If you fix a merge conflict once, Git will store
# the resolution on disk and reuse it if the same merge conflict is encountered again in
# the future (useful when cherry-picking, redoing rebases etc.).
[rerere]
  enabled = true

# LFS
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

# Keep includes at the end, so that they can override any of the previous settings.
[include]
  path = ~/Desktop/data/git_config_private
  path = ~/.config/git/local

# vi: ft=gitconfig
