# -*- mode: snippet; require-final-newline: nil -*-
# key: enc
# --
# this makes UTF-8 "just work" everywhere it makes sense, out of the box
use utf8::all;

use open ':encoding(cp1250)'; # set PerlIO layers for all IN/OUT filehandles
use encoding 'cp1250'; # set the program and STDIN/STDOUT's default encoding

# this sets up automatic decoding of all newly opened IN filehandles to utf8,
# and automatic encoding of all newly opened OUT filehandles to latin2;
# additionally, the :std subpragma adjusts all standard streams in the same way
use open IN => ":encoding(utf8)", OUT => ":encoding(latin2)", ":std";

# for manual de/encoding and conversion
use Encode qw(encode decode from_to);

# the following are equivalent: decode, then encode; or from_to. but careful:
# from_to modifies in place, and sometimes the string that's passed in will
# already be decoded (it will be a character string, not a byte string), if IO
# layers are set (see above). in that case, the decode step (and by extension
# from_to, which uses it) will fail.
