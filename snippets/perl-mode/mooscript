# -*- mode: snippet; require-final-newline: nil -*-
# key: mooscript
# expand-env: ((yas-indent-line 'fixed))
# --
#!/usr/bin/env perl

package App;
use utf8::all;
use Moose;
use Moose::Util::TypeConstraints;
use strict;
use warnings;
use autodie;
use FindBin;
use Log::Log4perl ':easy';
use v5.14;

Log::Log4perl->easy_init(
  {
    layout => "[%d $FindBin::Script:%p] %m%n",
    level  => $DEBUG,
  }
);

with 'MooseX::Getopt::Usage',
    'MooseX::Getopt::Usage::Role::Man';

subtype 'File',
    as 'Str',
    where { -f $_ },
    message { "'$_' is not a path to an existing file." };

has 'out' => (is => 'rw',
              isa => 'Str',
              required => 1,
              default => 'STDOUT',
              documentation => 'The out paramater');

has 'input' => (traits => ['Getopt'],
                is => 'ro',
                isa => 'ArrayRef[File]',
                cmd_flag => 'in',
                cmd_aliases => 'i',
                documentation => 'Input files or STDIN if absent');

sub getopt_usage_config {
  return (
    usage_sections => [qw(NAME SYNOPSIS OPTIONS)]
    );
}

sub main {
  my $self = shift;
  INFO 'Everything is working.';
  @ARGV = defined($self->input) ? @{$self->input} : ();
  while (<>) {
    print;
  }
}

no Moose;
__PACKAGE__->meta->make_immutable;

unless (caller) {
  my $app = App->new_with_options();
  $app->main;
  # use Data::Dumper;
  # print Dumper $app;
}

=pod

=encoding UTF-8

=head1 NAME

${1:mooscript.pl - do this or that.}

=head1 DESCRIPTION

${2:A longer description.}

=cut
