# -*- mode: snippet; require-final-newline: nil -*-
# key: script
# expand-env: ((yas-indent-line 'fixed))
# --
#!/usr/bin/env python3

"""${1:Name, usage, description.}

"""

import os.path as osp
import fileinput as fi
import logging as log
import argparse

NAME = osp.splitext(osp.basename(__file__))[0]
LOG = log.getLogger(NAME)
LOGLEVELS = [s for f, s in sorted(
    (v, k) for k, v in vars(log).items() if k.isupper() and isinstance(v, int))]


def parse_arguments(argv):
    """Return parsed argv.

    If argv is None, .parse_args() looks into sys.argv instead.

    """
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("input", nargs="*", help="input files, leave empty or - for STDIN")
    parser.add_argument("-s", "--string", help="sample string argument")
    parser.add_argument("-l", "--log", help="log levels", default="${2:WARNING}", choices=LOGLEVELS)
    parser.add_argument("-n", "--num", type=int, default=25, help="sample numeric argument")
    parser.add_argument("-b", "--bool", action="store_true", help="sample boolean argument")
    args = parser.parse_args(argv)
    log.basicConfig(level=args.log, format="[%(asctime)s {}:%(levelname)s] %(message)s".format(NAME))
    # check number of arguments, verify values, etc.:
    # if args:
    #     parser.error("Program takes no command-line arguments, {} ignored.".format(args))
    return args


def main(argv=None):
    args = parse_arguments(argv)
    input = args.input if args.input else ["-"]
    LOG.fatal("Everything's peachy!")
    for line in fi.input(input):
        $0
        print(line, end="")
        break


if __name__ == "__main__":
    main()
