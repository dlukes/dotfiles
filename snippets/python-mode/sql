# -*- mode: snippet -*-
# key: sql
# expand-env: ((yas-indent-line 'fixed))
# --
from contextlib import contextmanager

import sqlalchemy as sa
from sqlalchemy.ext.automap import automap_base

Base = automap_base()
engine = sa.create_engine("${1:dialect}://${2:user}:${3:password}@localhost/${4:dbname}?charset=utf8")
Base.prepare(engine, reflect=True)
${5:ORM_name} = Base.classes.${6:table_name}
# etc., repeat for additional tables


@contextmanager
def dbsession():
    s = sa.orm.Session(engine)
    try:
        yield s
        s.commit()
    except:
        s.rollback()
        raise
    finally:
        s.close()


# Session handling should be decoupled from logic. In other words, multiple database operations
# around the same point in the program should reuse the same session, then close it, and when it's
# next time to hit the database, a new session should be created. See below:
#
# with dbsession() as s:
#     hit_db1(s)
#     hit_db2(s)

# The easiest way to run some simple queries without bothering to set up any ORM reflection or
# sessions is the following:
#
# for row in engine.execute(sa.text("select username from users where name like :name").params(name="%David%")):
#     print(row)
$0
