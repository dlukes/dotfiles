# -*- mode: snippet; require-final-newline: nil -*-
# key: click
# expand-env: ((yas-indent-line 'fixed))
# --
#!/usr/bin/env python3

import os.path as osp
import click as cli
import logging as log

NAME = osp.splitext(osp.basename(__file__))[0]
LOG = log.getLogger(NAME)
LOGLEVELS = [s for f, s in sorted(
    (v, k) for k, v in vars(log).items() if k.isupper() and isinstance(v, int))]


@cli.command()
@cli.option("lvl", "--log", help="Set logging level.", type=cli.Choice(LOGLEVELS), default="${1:WARN}")
@cli.option("--verbose", "-v", help="(Repeatedly) increase logging level.", count=True)
@cli.option("--quiet", "-q", help="(Repeatedly) decrease logging level.", count=True)
@cli.argument("input", type=cli.File("rt", encoding="utf-8"), nargs=-1)
def main(lvl, verbose, quiet, input):
    """${2:CLI docstring.

    \b
    - don't
    - rewrap
    - this}

    INPUT are the files to process. Leave empty or - for STDIN.

    """
    lvl = getattr(log, lvl) - 10*verbose + 10*quiet
    log.basicConfig(level=lvl, format="[%(asctime)s {}:%(levelname)s] %(message)s".format(NAME))
    input = input if input else (cli.File("rt", encoding="utf-8")("-"),)
    cli.echo("Logging level: {}".format(lvl))
    cli.echo("Input: {}".format(input))
    LOG.fatal("Everything's peachy!")
    $0


if __name__ == "__main__":
    main()
